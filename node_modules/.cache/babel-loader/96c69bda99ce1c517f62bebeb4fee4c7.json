{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport FirebaseClass from \"../Services/firebase\";\nimport { hasLocalId } from \"./auth\";\nexport const slice = createSlice({\n  name: 'cards',\n  initialState: {\n    deck: Object(),\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    fetchPokemons: state => ({ ...state,\n      isLoading: true\n    }),\n    fetchPokemonsResolve: (state, action) => ({ ...state,\n      deck: action.payload,\n      isLoading: false\n    }),\n    fetchPokemonsReject: (state, action) => ({ ...state,\n      isLoading: false,\n      deck: Object(),\n      error: action.payload\n    }),\n    addNewPokemon: state => state\n  }\n});\nconst cardsMethods = slice.actions;\nexport const getPokemonsAsync = () => async (dispatch, getState) => {\n  const localId = hasLocalId(getState());\n  dispatch(cardsMethods.fetchPokemons);\n  const data = await FirebaseClass.GetAllPokemonsAPI(localId);\n  dispatch(cardsMethods.fetchPokemonsResolve(data));\n};\n/* export const getPokemonsAsync = () => (dispatch) => {\n    dispatch(getPokemonsUpdateAsync());\n} */\n\nexport const addPokemon = pokemon => async dispatch => {\n  FirebaseClass.AddNewPokemon(pokemon, () => dispatch(cardsMethods.addNewPokemon()));\n};\nexport const addPokemonAPI = (pokemon, userInfo) => async dispatch => {\n  FirebaseClass.AddNewPokemonAPI(pokemon, userInfo);\n};\nexport const selectCards = state => state.cards;\nexport const deck = state => {\n  var _state$cards;\n\n  return (_state$cards = state.cards) === null || _state$cards === void 0 ? void 0 : _state$cards.deck;\n};\nexport const isLoading = state => state.cards.isLoading;\nexport default slice.reducer;","map":{"version":3,"sources":["/Users/aleksandr/Desktop/Pok-game/src/store/cards.js"],"names":["createSlice","FirebaseClass","hasLocalId","slice","name","initialState","deck","Object","isLoading","error","reducers","fetchPokemons","state","fetchPokemonsResolve","action","payload","fetchPokemonsReject","addNewPokemon","cardsMethods","actions","getPokemonsAsync","dispatch","getState","localId","data","GetAllPokemonsAPI","addPokemon","pokemon","AddNewPokemon","addPokemonAPI","userInfo","AddNewPokemonAPI","selectCards","cards","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,MAAMC,KAAK,GAAGH,WAAW,CAAC;AAC7BI,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAGC,MAAM,EADH;AAEVC,IAAAA,SAAS,EAAG,KAFF;AAGVC,IAAAA,KAAK,EAAG;AAHE,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACFC,IAAAA,aAAa,EAAEC,KAAK,KAAK,EACrB,GAAGA,KADkB;AAErBJ,MAAAA,SAAS,EAAG;AAFS,KAAL,CADlB;AAKFK,IAAAA,oBAAoB,EAAE,CAACD,KAAD,EAAQE,MAAR,MAAoB,EACtC,GAAGF,KADmC;AAEtCN,MAAAA,IAAI,EAAGQ,MAAM,CAACC,OAFwB;AAGtCP,MAAAA,SAAS,EAAG;AAH0B,KAApB,CALpB;AAUFQ,IAAAA,mBAAmB,EAAE,CAACJ,KAAD,EAAQE,MAAR,MAAoB,EACrC,GAAGF,KADkC;AAErCJ,MAAAA,SAAS,EAAG,KAFyB;AAGrCF,MAAAA,IAAI,EAAGC,MAAM,EAHwB;AAIrCE,MAAAA,KAAK,EAAGK,MAAM,CAACC;AAJsB,KAApB,CAVnB;AAgBFE,IAAAA,aAAa,EAAGL,KAAD,IAAYA;AAhBzB;AAPmB,CAAD,CAAzB;AA2BP,MAAMM,YAAY,GAAGf,KAAK,CAACgB,OAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,OAAOC,QAAP,EAAgBC,QAAhB,KAA6B;AAC/D,QAAMC,OAAO,GAAGrB,UAAU,CAACoB,QAAQ,EAAT,CAA1B;AACAD,EAAAA,QAAQ,CAACH,YAAY,CAACP,aAAd,CAAR;AACA,QAAMa,IAAI,GAAG,MAAMvB,aAAa,CAACwB,iBAAd,CAAgCF,OAAhC,CAAnB;AACAF,EAAAA,QAAQ,CAACH,YAAY,CAACL,oBAAb,CAAkCW,IAAlC,CAAD,CAAR;AACH,CALM;AAOP;AACA;AACA;;AAEA,OAAO,MAAME,UAAU,GAAIC,OAAD,IAAa,MAAON,QAAP,IAAoB;AACvDpB,EAAAA,aAAa,CAAC2B,aAAd,CAA4BD,OAA5B,EAAqC,MAAMN,QAAQ,CAACH,YAAY,CAACD,aAAb,EAAD,CAAnD;AACH,CAFM;AAIP,OAAO,MAAMY,aAAa,GAAG,CAACF,OAAD,EAAUG,QAAV,KAAuB,MAAOT,QAAP,IAAoB;AACpEpB,EAAAA,aAAa,CAAC8B,gBAAd,CAA+BJ,OAA/B,EAAwCG,QAAxC;AACH,CAFM;AAIP,OAAO,MAAME,WAAW,GAAGpB,KAAK,IAAIA,KAAK,CAACqB,KAAnC;AACP,OAAO,MAAM3B,IAAI,GAAGM,KAAK;AAAA;;AAAA,yBAAIA,KAAK,CAACqB,KAAV,iDAAI,aAAa3B,IAAjB;AAAA,CAAlB;AACP,OAAO,MAAME,SAAS,GAAGI,KAAK,IAAIA,KAAK,CAACqB,KAAN,CAAYzB,SAAvC;AAEP,eAAeL,KAAK,CAAC+B,OAArB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport FirebaseClass from \"../Services/firebase\";\nimport { hasLocalId } from \"./auth\";\n\nexport const slice = createSlice({\n    name: 'cards',\n    initialState: {\n        deck : Object(),\n        isLoading : false,\n        error : null\n    },\n    reducers: {\n            fetchPokemons: state => ({\n                ...state,\n                isLoading : true,\n            }),\n            fetchPokemonsResolve: (state, action) => ({\n                ...state,\n                deck : action.payload, \n                isLoading : false,\n            }),\n            fetchPokemonsReject: (state, action) => ({\n                ...state,\n                isLoading : false,\n                deck : Object(),\n                error : action.payload\n            }),\n            addNewPokemon: (state) => (state),\n    }\n})\n\nconst cardsMethods = slice.actions;\n\nexport const getPokemonsAsync = () => async (dispatch,getState) => {\n    const localId = hasLocalId(getState());\n    dispatch(cardsMethods.fetchPokemons);\n    const data = await FirebaseClass.GetAllPokemonsAPI(localId);\n    dispatch(cardsMethods.fetchPokemonsResolve(data));\n}\n\n/* export const getPokemonsAsync = () => (dispatch) => {\n    dispatch(getPokemonsUpdateAsync());\n} */\n\nexport const addPokemon = (pokemon) => async (dispatch) => {\n    FirebaseClass.AddNewPokemon(pokemon, () => dispatch(cardsMethods.addNewPokemon()));\n}\n\nexport const addPokemonAPI = (pokemon, userInfo) => async (dispatch) => {\n    FirebaseClass.AddNewPokemonAPI(pokemon, userInfo);\n}\n\nexport const selectCards = state => state.cards;\nexport const deck = state => state.cards?.deck;\nexport const isLoading = state => state.cards.isLoading;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}