{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandr/Desktop/Pok-game/src/routes/Game/routes/Finish/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport s from './style.module.css';\nimport cn from 'classnames';\nimport PokemonCard from \"../../../../components/PokemonCard\";\nimport { useSelector } from \"react-redux\";\nimport { selectGame, gameMethods } from '../../../../store/game';\nimport { addPokemon } from \"../../../../store/cards\";\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FinishPage = () => {\n  _s();\n\n  const gameContext = useSelector(selectGame);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [selectedCard, setSelectedCard] = useState(null);\n  const player1 = gameContext.player1;\n  const [player2, setPlayer2] = useState(gameContext.player2);\n  if (Object.keys(player1).length === 0) history.replace('/game');\n\n  const saveResultAndFinish = () => {\n    if (selectedCard !== null) {\n      delete selectedCard.isSelected;\n      dispatch(addPokemon(selectedCard));\n    }\n\n    dispatch(gameMethods.clean());\n    history.push('/game');\n  };\n\n  const pickCard = key => {\n    console.log('key', key);\n    setPlayer2(prevState => {\n      return prevState.reduce((acc, item) => {\n        const newItem = { ...item,\n          isSelected: false\n        };\n\n        if (newItem.id === key) {\n          setSelectedCard(item);\n          newItem.isSelected = true;\n        }\n\n        acc.push(newItem);\n        return acc;\n      }, []);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.root,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: cn(s.flex, s.playerOne),\n        children: Object.entries(player1).map(([key, item]) => /*#__PURE__*/_jsxDEV(PokemonCard, {\n          objectId: key,\n          id: item.id,\n          name: item.name,\n          type: item.type,\n          img: item.img,\n          values: item.values,\n          isActive: true,\n          isSelected: item.isSelected,\n          className: s.origin\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 69\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.wrapper,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveResultAndFinish,\n          disabled: gameContext.winner === 1 && selectedCard === null,\n          children: \"FINISH GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cn(s.flex, s.playerTwo),\n        children: player2.map((item, key) => /*#__PURE__*/_jsxDEV(PokemonCard, {\n          id: item.id,\n          name: item.name,\n          type: item.type,\n          img: item.img,\n          values: item.values,\n          pickCard: () => {\n            if (gameContext.winner === 1) {\n              pickCard(item.id);\n            }\n          },\n          isActive: true,\n          isSelected: item.isSelected,\n          className: s.origin\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 51\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FinishPage, \"5VtLPsiqszxbiuzB8BvNA5pd95k=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c = FinishPage;\nexport default FinishPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FinishPage\");","map":{"version":3,"sources":["/Users/aleksandr/Desktop/Pok-game/src/routes/Game/routes/Finish/index.js"],"names":["React","useState","useHistory","s","cn","PokemonCard","useSelector","selectGame","gameMethods","addPokemon","useDispatch","FinishPage","gameContext","dispatch","history","selectedCard","setSelectedCard","player1","player2","setPlayer2","Object","keys","length","replace","saveResultAndFinish","isSelected","clean","push","pickCard","key","console","log","prevState","reduce","acc","item","newItem","id","root","flex","playerOne","entries","map","name","type","img","values","origin","wrapper","winner","playerTwo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport s from './style.module.css';\nimport cn from 'classnames';\nimport PokemonCard from \"../../../../components/PokemonCard\";\nimport { useSelector } from \"react-redux\";\nimport { selectGame, gameMethods } from '../../../../store/game';\nimport { addPokemon } from \"../../../../store/cards\";\nimport { useDispatch } from 'react-redux';\n\n\nconst FinishPage = () => {\n    const gameContext = useSelector(selectGame);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [selectedCard, setSelectedCard] = useState(null);\n\n    const player1 = gameContext.player1;\n    const [player2,setPlayer2] = useState(gameContext.player2);\n\n    if(Object.keys(player1).length === 0)\n        history.replace('/game');\n\n    const saveResultAndFinish = () => {\n        if(selectedCard !== null)\n        {\n            delete selectedCard.isSelected;\n            dispatch(addPokemon(selectedCard));\n        }\n        dispatch(gameMethods.clean());\n        history.push('/game');\n    }\n    const pickCard = (key) => {\n        console.log('key',key);\n        setPlayer2( prevState => {\n            return prevState.reduce((acc, item) =>{\n                const newItem = { ...item, isSelected : false};\n                if( newItem.id === key)\n                {\n                    setSelectedCard(item);\n                    newItem.isSelected = true;\n                }\n                acc.push(newItem);\n                return acc;\n            },[]);\n        })\n    }\n    return (\n        <React.Fragment>\n            <div className={s.root}>\n                <div className={cn(s.flex, s.playerOne)}>\n                    {\n                        Object.entries(player1).map(([key,item]) => <PokemonCard key={key} objectId={key}\n                        id={item.id} name={item.name} type={item.type} img={item.img} values={item.values}\n                        isActive={true} isSelected={item.isSelected} className={s.origin}\n                        />)\n                    }\n                </div>\n                <div className={s.wrapper}>\n                    <button onClick={saveResultAndFinish}\n                            disabled={( gameContext.winner === 1) && (selectedCard === null)}>\n                        FINISH GAME\n                    </button>\n                </div>\n                <div className={cn(s.flex, s.playerTwo)}>\n                    {\n                        player2.map((item,key) => <PokemonCard key={key} \n                        id={item.id} name={item.name} type={item.type} img={item.img} values={item.values}\n                        pickCard={ () =>{ if(gameContext.winner === 1) { pickCard(item.id);}}} isActive={true} isSelected={item.isSelected}\n                            className={s.origin}\n                        />)\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default FinishPage;"]},"metadata":{},"sourceType":"module"}