{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandr/Desktop/Pok-game/src/routes/Game/routes/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport s from './style.module.css';\nimport { useHistory } from 'react-router-dom';\nimport PokemonCard from '../../../../components/PokemonCard';\nimport PlayerBoard from './components/PlayerBoard';\nimport ArrowChoice from './components/ArrowChoice';\nimport Result from './components/Result';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectGame, gameMethods } from '../../../../store/game';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst counterWin = (board, player1, player2) => {\n  let player1Count = player1.length;\n  let player2Count = player2.length;\n  board.forEach(element => {\n    var _element$card, _element$card2;\n\n    if (((_element$card = element.card) === null || _element$card === void 0 ? void 0 : _element$card.possession) === 'red') player2Count++;\n    if (((_element$card2 = element.card) === null || _element$card2 === void 0 ? void 0 : _element$card2.possession) === 'blue') player1Count++;\n  });\n  return [player1Count, player2Count];\n};\n\nconst BoardPage = () => {\n  _s();\n\n  const gameContext = useSelector(selectGame);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [board, setBoard] = useState([]);\n  const [player1, setPlayer1] = useState(() => Object.values(gameContext.player1).map(item => ({ ...item,\n    possession: 'blue'\n  })));\n  const [player2, setPlayer2] = useState([]);\n  const [step, setStep] = useState(0);\n  const [chosenCard, setChosenCard] = useState(null);\n  const [result, setResult] = useState(null);\n\n  const getTurn = currentTurn => {\n    if (currentTurn !== undefined) {\n      return currentTurn % 2 + 1;\n    }\n\n    if (Math.random() > 0.5) return 1;else return 2;\n  };\n\n  const [turn, setTurn] = useState(getTurn(undefined));\n  const cards = gameContext.player1;\n  if (Object.keys(cards).length === 0) history.replace('/game');\n  useEffect(() => {\n    async function getResponse() {\n      const boardResponse = await fetch('https://reactmarathon-api.netlify.app/api/board');\n      const boardRequest = await boardResponse.json();\n      setBoard(boardRequest.data);\n      const palyer2Response = await fetch('https://reactmarathon-api.netlify.app/api/create-player');\n      const palyer2Request = await palyer2Response.json();\n      setPlayer2(palyer2Request.data.map(item => ({ ...item,\n        possession: 'red'\n      })));\n      dispatch(gameMethods.player2Set(palyer2Request.data.map(item => ({ ...item\n      }))));\n    }\n\n    ;\n    getResponse();\n    /* return () => {\n        gameContext.clean(); \n    }*/\n  }, []);\n\n  const handleClickBoardPlate = async position => {\n    if (chosenCard && chosenCard.player === turn) {\n      const params = {\n        position,\n        card: chosenCard,\n        board\n      };\n      const res = await fetch('https://reactmarathon-api.netlify.app/api/players-turn', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      });\n      const request = await res.json();\n      setBoard(request.data);\n      if (chosenCard.player === 1) setPlayer1(prevState => prevState.filter(t => t.id !== chosenCard.id));\n      if (chosenCard.player === 2) setPlayer2(prevState => prevState.filter(t => t.id !== chosenCard.id));\n      setStep(prevState => {\n        const count = prevState + 1;\n        return count;\n      });\n      setTurn(prevState => {\n        const newTurn = getTurn(prevState);\n        return newTurn;\n      });\n    }\n  };\n\n  useEffect(() => {\n    async function getResult() {\n      if (step === 9) {\n        const [count1, count2] = counterWin(board, player1, player2);\n        let caption = '';\n\n        if (count1 > count2) {\n          dispatch(gameMethods.setWinner(1));\n          caption = 'win';\n        } else if (count2 > count1) {\n          dispatch(gameMethods.setWinner(2));\n          caption = 'lose';\n        } else {\n          dispatch(gameMethods.setWinner(0));\n          caption = 'draw';\n        }\n\n        setResult(caption);\n\n        function sleep(ms) {\n          return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        await sleep(4000);\n        history.push('/game/finish');\n      }\n\n      ;\n    }\n\n    getResult();\n  }, [step]);\n\n  const chooseCard = card => {\n    if (card.player === turn) {\n      setChosenCard(card);\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.root,\n    children: [/*#__PURE__*/_jsxDEV(Result, {\n      type: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ArrowChoice, {\n      side: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerOne,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 1,\n        cards: player1,\n        onCardChosen: chooseCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.board,\n      children: board.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.boardPlate,\n        onClick: () => {\n          !item.card && handleClickBoardPlate(item.position);\n        },\n        children: item.card && /*#__PURE__*/_jsxDEV(PokemonCard, { ...item.card,\n          isActive: true,\n          minimize: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 46\n        }, this)\n      }, item.position, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerTwo,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 2,\n        cards: player2,\n        onCardChosen: chooseCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardPage, \"/qK6+acQnLYSRZVE1NbuKjgiETY=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c = BoardPage;\nexport default BoardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardPage\");","map":{"version":3,"sources":["/Users/aleksandr/Desktop/Pok-game/src/routes/Game/routes/Board/index.js"],"names":["s","useHistory","PokemonCard","PlayerBoard","ArrowChoice","Result","useEffect","useState","useSelector","selectGame","gameMethods","useDispatch","counterWin","board","player1","player2","player1Count","length","player2Count","forEach","element","card","possession","BoardPage","gameContext","dispatch","history","setBoard","setPlayer1","Object","values","map","item","setPlayer2","step","setStep","chosenCard","setChosenCard","result","setResult","getTurn","currentTurn","undefined","Math","random","turn","setTurn","cards","keys","replace","getResponse","boardResponse","fetch","boardRequest","json","data","palyer2Response","palyer2Request","player2Set","handleClickBoardPlate","position","player","params","res","method","headers","body","JSON","stringify","request","prevState","filter","t","id","count","newTurn","getResult","count1","count2","caption","setWinner","sleep","ms","Promise","resolve","setTimeout","push","chooseCard","root","playerOne","boardPlate","playerTwo"],"mappings":"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","sourcesContent":["import s from './style.module.css';\nimport { useHistory } from 'react-router-dom';\nimport PokemonCard from '../../../../components/PokemonCard';\nimport PlayerBoard from './components/PlayerBoard';\nimport ArrowChoice from './components/ArrowChoice';\nimport Result from './components/Result';\nimport {useEffect, useState} from 'react'\nimport { useSelector } from 'react-redux';\nimport { selectGame , gameMethods} from '../../../../store/game';\nimport { useDispatch } from 'react-redux';\n\nconst counterWin = (board, player1, player2 ) => {\n    let player1Count = player1.length;\n    let player2Count = player2.length;\n\n    board.forEach(element => {\n        if(element.card?.possession === 'red')\n            player2Count++;\n        if(element.card?.possession === 'blue')\n            player1Count++;\n    });\n\n    return [player1Count, player2Count];\n}\n\nconst BoardPage = () => {\n    const gameContext = useSelector(selectGame);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [board,setBoard] = useState([]);\n    const [player1, setPlayer1] = useState(() => Object.values(gameContext.player1).map(item=>({...item, possession:'blue'})));\n    const [player2,setPlayer2] = useState([]);\n    const [step,setStep] = useState(0);\n    const [chosenCard, setChosenCard] = useState(null);\n    const [result, setResult] = useState(null);\n\n    const getTurn = (currentTurn) => {\n        if(currentTurn !== undefined){\n            return ((currentTurn%2) + 1);\n        }\n        if(Math.random() > 0.5)\n            return 1;\n        else\n            return 2;\n    }\n    \n    const [turn, setTurn] = useState(getTurn(undefined));\n    const cards = gameContext.player1;\n\n    if(Object.keys(cards).length === 0)\n        history.replace('/game');\n\n    useEffect( () => {   \n        async function getResponse () {\n            const boardResponse = await fetch('https://reactmarathon-api.netlify.app/api/board');\n            const boardRequest = await boardResponse.json();\n            setBoard(boardRequest.data);\n\n            const palyer2Response = await fetch('https://reactmarathon-api.netlify.app/api/create-player');\n            const palyer2Request = await palyer2Response.json();\n            setPlayer2(palyer2Request.data.map(item=>({...item, possession:'red'})));\n\n            dispatch(gameMethods.player2Set(palyer2Request.data.map(item=>({...item}))));\n        };\n        getResponse();\n\n\n        /* return () => {\n            gameContext.clean(); \n        }*/\n    }, []);\n    const handleClickBoardPlate = async (position) =>{\n        if(chosenCard && chosenCard.player === turn)\n        {\n            const params = { position, card:chosenCard, board };\n            const res = await fetch('https://reactmarathon-api.netlify.app/api/players-turn', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(params),\n            });\n\n            const request = await res.json();\n\n            setBoard(request.data);\n\n            if(chosenCard.player === 1)\n                setPlayer1(prevState => prevState.filter(t=>t.id !== chosenCard.id));\n\n            if(chosenCard.player === 2)\n                setPlayer2(prevState => prevState.filter(t=>t.id !== chosenCard.id));\n\n            setStep(prevState => { const count =prevState +1 ; return count;})\n            setTurn(prevState => { const newTurn = getTurn(prevState); return newTurn;});\n\n        }\n    }\n    useEffect( () => {\n        async function getResult(){\n            if (step === 9)\n            {\n                const [count1, count2] = counterWin(board,player1,player2);\n                let caption = '';\n                if(count1>count2)\n                {\n                    dispatch(gameMethods.setWinner(1));\n                    caption ='win';\n                }\n                else if (count2 > count1)\n                {\n                    dispatch(gameMethods.setWinner(2));\n                    caption='lose';\n                }\n                else\n                {\n                    dispatch(gameMethods.setWinner(0));\n                    caption = 'draw';\n                }\n                setResult(caption);\n                function sleep(ms) {\n                    return new Promise(resolve => setTimeout(resolve, ms));\n                }\n                await sleep(4000);\n                history.push('/game/finish');\n            };\n        }\n        getResult();\n    },[step]);\n    const chooseCard = (card) => {\n        if( card.player === turn)\n        {\n            setChosenCard(card)\n            return true;\n        }\n        return false;\n    }\n    return (\n        <div className={s.root}>\n            <Result type={result} />\n            <ArrowChoice side={turn} />\n            <div className={s.playerOne}>\n                    <PlayerBoard player={1} cards={player1} onCardChosen={ chooseCard}  />\n            </div>\n            <div className={s.board}>\n                {\n                    board.map( item => (\n                        <div key={item.position}\n                        className={s.boardPlate} \n                        onClick={ () => { !item.card && handleClickBoardPlate(item.position);}}\n                        >\n                            {\n                                item.card && <PokemonCard {...item.card} isActive minimize />\n                            }\n                        </div>\n                    ))\n                }\n            </div>\n            <div className={s.playerTwo}>\n                <PlayerBoard player={2} cards={player2} onCardChosen={ chooseCard} />\n            </div>\n        </div>\n    );\n};\n\nexport default BoardPage;"]},"metadata":{},"sourceType":"module"}