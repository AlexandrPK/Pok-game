{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { NotificationManager } from \"react-notifications\";\nimport FirebaseClass from \"../Services/firebase\";\nexport const slice = createSlice({\n  name: 'auth',\n  initialState: {\n    isLoggedIn: localStorage.getItem('idToken') !== null,\n    isActionProcessing: true,\n    currentUser: Object()\n  },\n  reducers: {\n    start: state => ({ ...state,\n      isActionProcessing: true\n    }),\n    signin: (state, action) => ({ ...state,\n      isLoggedIn: action.payload\n    }),\n    signup: (state, action) => ({ ...state,\n      isLoggedIn: action.payload\n    }),\n    logout: state => ({ ...state,\n      currentUser: Object(),\n      isLoggedIn: false,\n      isActionProcessing: false\n    }),\n    getUser: (state, action) => ({ ...state,\n      currentUser: action.payload\n    }),\n    end: state => ({ ...state,\n      isActionProcessing: false\n    })\n  }\n});\n\nconst auth = async (url, data) => {\n  const request = {\n    method: \"POST\",\n    body: JSON.stringify({\n      email: data.email,\n      password: data.password,\n      returnSecureToken: true\n    })\n  };\n  const response = await fetch(url, request).then(res => res.json());\n\n  if (response.hasOwnProperty('error')) {\n    NotificationManager.error(response.error.message, \"Error\");\n    return {\n      result: false\n    };\n  } else {\n    localStorage.setItem('idToken', response.idToken);\n    return {\n      result: true,\n      idToken: response.idToken,\n      localId: response.localId\n    };\n  }\n};\n\nconst key = 'AIzaSyBpwM-_LN_TarR1NbNedA5hbeae-nmGaI4';\nconst authMethods = slice.actions;\nexport const isLoggedIn = state => state.auth.isLoggedIn;\nexport const hasLocalId = state => {\n  var _state$auth$currentUs;\n\n  return (_state$auth$currentUs = state.auth.currentUser) === null || _state$auth$currentUs === void 0 ? void 0 : _state$auth$currentUs.localId;\n};\nexport const isActionProcessing = state => state.auth.isActionProcessing;\nexport const signIn = data => async dispatch => {\n  dispatch(authMethods.start());\n  const signInURL = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${key}`;\n  const {\n    result\n  } = await auth(signInURL, data);\n  dispatch(authMethods.signin(result));\n\n  if (result) {\n    dispatch(getUserAsync());\n    NotificationManager.success(\"Login success!\");\n  }\n};\nexport const signUp = data => async dispatch => {\n  dispatch(authMethods.start());\n  const signUpURL = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${key}`;\n  const {\n    result,\n    idToken,\n    localId\n  } = await auth(signUpURL, data);\n  dispatch(authMethods.signup(result));\n\n  if (result) {\n    const startDeck = await fetch('https://reactmarathon-api.herokuapp.com/api/pokemons/starter').then(res => res.json());\n    startDeck.data.map(card => {\n      return FirebaseClass.AddNewPokemonAPI(card, {\n        idToken,\n        localId\n      });\n    });\n    NotificationManager.success(\"Success!\");\n    dispatch(getUserAsync());\n  }\n};\nexport const logOut = () => async dispatch => {\n  localStorage.removeItem('idToken');\n  dispatch(authMethods.logout());\n  dispatch(getUserAsync());\n};\n\nconst getInfoAsync = async () => {\n  const idToken = localStorage.getItem('idToken');\n\n  if (idToken) {\n    const result = await FirebaseClass.GetUserInfoAPI(idToken);\n    if (result) return result;else return false;\n  } else return false;\n};\n\nexport const getUserAsync = () => async dispatch => {\n  const userInfo = await getInfoAsync();\n\n  if (userInfo) {\n    dispatch(authMethods.getUser(userInfo));\n    dispatch(authMethods.end());\n  } else {\n    dispatch(authMethods.logout());\n  }\n};\nexport const getUserSync = () => dispatch => {\n  dispatch(authMethods.start());\n  dispatch(getUserAsync());\n};\nexport const selectAuth = state => state.auth;\nexport default slice.reducer;","map":{"version":3,"sources":["/Users/aleksandr/Desktop/Pok-game/src/store/auth.js"],"names":["createSlice","NotificationManager","FirebaseClass","slice","name","initialState","isLoggedIn","localStorage","getItem","isActionProcessing","currentUser","Object","reducers","start","state","signin","action","payload","signup","logout","getUser","end","auth","url","data","request","method","body","JSON","stringify","email","password","returnSecureToken","response","fetch","then","res","json","hasOwnProperty","error","message","result","setItem","idToken","localId","key","authMethods","actions","hasLocalId","signIn","dispatch","signInURL","getUserAsync","success","signUp","signUpURL","startDeck","map","card","AddNewPokemonAPI","logOut","removeItem","getInfoAsync","GetUserInfoAPI","userInfo","getUserSync","selectAuth","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { NotificationManager } from \"react-notifications\";\nimport FirebaseClass from \"../Services/firebase\";\n\nexport const slice = createSlice({\n    name: 'auth',\n    initialState: {\n        isLoggedIn : localStorage.getItem('idToken') !== null,\n        isActionProcessing : true,\n        currentUser : Object(),\n    },\n    reducers: {\n            start: state =>({\n                 ...state,\n                isActionProcessing: true\n            }),\n            signin: (state,action) =>  ({ ...state,\n                    isLoggedIn: action.payload,\n                }),\n            signup : (state,action) =>  ({ ...state,\n                isLoggedIn: action.payload,\n            }),\n            logout : (state) =>  ({ ...state,\n                currentUser: Object(),\n                isLoggedIn: false,\n                isActionProcessing : false,\n            }),\n            getUser : (state, action) => ({\n                ...state,\n                currentUser : action.payload\n            }),\n            end: state => ({...state, isActionProcessing : false})\n    }\n})\n\n\nconst auth = async (url, data) => {\n\n    const request = {\n        method: \"POST\",\n        body: JSON.stringify({\n            email : data.email,\n            password : data.password,\n            returnSecureToken : true\n        })\n    }\n    \n    const response = await fetch(url, request).then( res => res.json());\n\n    if(response.hasOwnProperty('error'))\n    {\n        NotificationManager.error(response.error.message,\"Error\");\n        return { result : false};\n    }\n    else\n    {\n        localStorage.setItem('idToken', response.idToken);\n        return {result : true, idToken : response.idToken, localId: response.localId}\n    }\n}\n\nconst key='AIzaSyBpwM-_LN_TarR1NbNedA5hbeae-nmGaI4'\n\nconst authMethods = slice.actions;\n\nexport const isLoggedIn = state => state.auth.isLoggedIn;\n\nexport const hasLocalId = state => state.auth.currentUser?.localId;\n\nexport const isActionProcessing = state => state.auth.isActionProcessing;\n\nexport const signIn = (data) => async (dispatch) => {\n    dispatch(authMethods.start());\n    const signInURL = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${key}`;\n    const {result} = await auth(signInURL, data);\n    dispatch(authMethods.signin(result));\n    if(result)\n    {\n        dispatch(getUserAsync());\n        NotificationManager.success(\"Login success!\");\n    }\n}\nexport const signUp = (data) => async (dispatch) => {\n    dispatch(authMethods.start());\n    const signUpURL = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${key}`;\n    const {result, idToken, localId} = await auth(signUpURL, data);\n    dispatch(authMethods.signup(result));\n    if(result){\n        const startDeck = await fetch('https://reactmarathon-api.herokuapp.com/api/pokemons/starter').then(res => res.json());\n        startDeck.data.map( card =>{\n            return FirebaseClass.AddNewPokemonAPI(card, {idToken, localId});\n        });\n\n        NotificationManager.success(\"Success!\");\n        dispatch(getUserAsync());\n    }\n}\nexport const logOut = () => async (dispatch) => {\n    localStorage.removeItem('idToken');\n    dispatch(authMethods.logout());\n    dispatch(getUserAsync());\n}\nconst getInfoAsync = async () =>{\n    const idToken = localStorage.getItem('idToken');\n    if(idToken){\n        const result = await FirebaseClass.GetUserInfoAPI(idToken);\n        if(result)\n            return result;\n        else\n            return false;\n    }\n    else\n        return false;\n}\nexport const getUserAsync = () => async (dispatch) => {\n    const userInfo = await getInfoAsync();\n    if(userInfo)\n    {\n        dispatch(authMethods.getUser(userInfo));\n        dispatch(authMethods.end());   \n    }\n    else\n    {\n        dispatch(authMethods.logout());\n    }\n}\n\nexport const getUserSync = () => (dispatch) => {\n    dispatch(authMethods.start());\n    dispatch(getUserAsync());  \n}\n\n\nexport const selectAuth = state => state.auth;\n\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}