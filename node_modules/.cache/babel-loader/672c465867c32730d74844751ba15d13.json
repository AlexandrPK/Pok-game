{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandr/Desktop/Pok-game/src/routes/Game/routes/Start/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Layout from './../../../../components/Layout';\nimport PokemonCard from \"./../../../../components/PokemonCard\";\nimport sComp from \"./style.module.css\";\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectGame, gameMethods } from '../../../../store/game';\nimport { selectCards, getPokemonsAsync } from '../../../../store/cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StartPage = ({\n  onPageChange\n}) => {\n  _s();\n\n  const gameContext = useSelector(selectGame);\n  const cardsContext = useSelector(selectCards);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [cards, setCards] = useState(cardsContext.deck);\n  useEffect(() => {\n    dispatch(getPokemonsAsync());\n  }, []);\n  useEffect(() => {\n    setCards(cardsContext.deck);\n  }, [cardsContext]);\n\n  const onClickButton = () => {\n    history.push('/game/board');\n  };\n\n  const pickCard = objectId => {\n    const objTosend = cards[objectId];\n    dispatch(gameMethods.onPokemonAdd({\n      key: objectId,\n      value: objTosend\n    }));\n    setCards(prevState => ({ ...prevState,\n      [objectId]: { ...prevState[objectId],\n        isSelected: !prevState[objectId].isSelected\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: sComp.wrapper,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClickButton,\n        disabled: Object.keys(gameContext.player1).length < 5,\n        children: \"START THE GAME!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      title: \"Pokemons\",\n      colorBg: \"SkyBlue\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: sComp.flex,\n        children: Object.entries(cards).map(([key, item]) => /*#__PURE__*/_jsxDEV(PokemonCard, {\n          objectId: key,\n          id: item.id,\n          name: item.name,\n          type: item.type,\n          img: item.img,\n          values: item.values,\n          pickCard: () => {\n            if (Object.keys(gameContext.player1).length < 5 || item.isSelected) pickCard(key);\n          },\n          isActive: true,\n          isSelected: item.isSelected,\n          className: sComp.origin\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 59\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StartPage, \"DWtWICyg1Brt702kRJA2BPmbp7k=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = StartPage;\nexport default StartPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartPage\");","map":{"version":3,"sources":["/Users/aleksandr/Desktop/Pok-game/src/routes/Game/routes/Start/index.js"],"names":["React","useState","useEffect","Layout","PokemonCard","sComp","useHistory","useSelector","useDispatch","selectGame","gameMethods","selectCards","getPokemonsAsync","StartPage","onPageChange","gameContext","cardsContext","dispatch","history","cards","setCards","deck","onClickButton","push","pickCard","objectId","objTosend","onPokemonAdd","key","value","prevState","isSelected","wrapper","Object","keys","player1","length","flex","entries","map","item","id","name","type","img","values","origin"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Layout from './../../../../components/Layout';\nimport PokemonCard from \"./../../../../components/PokemonCard\";\nimport sComp from \"./style.module.css\";\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectGame , gameMethods} from '../../../../store/game';\nimport { selectCards, getPokemonsAsync } from '../../../../store/cards';\n\nconst StartPage = ({onPageChange}) =>{\n    const gameContext = useSelector(selectGame);\n    const cardsContext = useSelector(selectCards);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [cards, setCards] = useState(cardsContext.deck);\n\n    useEffect(() =>{ \n        dispatch(getPokemonsAsync());\n    }, []);\n    \n    useEffect(() => {\n        setCards(cardsContext.deck);\n    }, [cardsContext])\n\n    const onClickButton = () =>{\n        history.push('/game/board');\n    }\n    const pickCard = (objectId) => {\n        const objTosend = cards[objectId];\n        dispatch(gameMethods.onPokemonAdd({ key : objectId, value : objTosend}));\n        \n        setCards( (prevState) => ({\n            ...prevState,\n            [objectId] : {\n                ...prevState[objectId],\n                isSelected : !prevState[objectId].isSelected\n            }\n        }));\n    }\n    return(\n        <React.Fragment>\n        <div className={sComp.wrapper}>\n            <button onClick={onClickButton}\n                disabled={Object.keys(gameContext.player1).length < 5 }\n            >\n                START THE GAME!\n            </button>\n        </div>\n        <Layout title=\"Pokemons\" colorBg=\"SkyBlue\">\n            <div className={sComp.flex}>\n            {\n                Object.entries(cards).map(([key,item]) => <PokemonCard key={key} objectId={key}\n                    id={item.id} name={item.name} type={item.type} img={item.img} values={item.values}\n                    pickCard={ () =>{\n                        if(Object.keys(gameContext.player1).length < 5 || item.isSelected)\n                        pickCard(key);}} isActive={true} isSelected={item.isSelected}\n                    className={sComp.origin}\n                    />)\n            }\n            </div>\n        </Layout>\n      </React.Fragment>\n    )\n}\n\nexport default StartPage;"]},"metadata":{},"sourceType":"module"}